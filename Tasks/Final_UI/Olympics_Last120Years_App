{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-1-b01432e91fc0>:136: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from jupyter_dash import JupyterDash\n",
    "import dash\n",
    "import dash_core_components as dcc\n",
    "import dash_html_components as html\n",
    "from dash.dependencies import Input, Output\n",
    "import plotly.express as px\n",
    "import plotly.offline as pyo\n",
    "import plotly.graph_objs as go\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=FutureWarning)\n",
    "\n",
    "\n",
    "#Dataset-Sid\n",
    "events_df_sid = pd.read_csv(r\"D:/Semester_1/Cloud Technologies/Assignment_2/athlete_events.csv\")\n",
    "#Datset-Pallavi\n",
    "nocRegions = pd.read_csv(r\"D:/Semester_1/Cloud Technologies/Assignment_2/noc_regions.csv\")\n",
    "athlete = pd.read_csv(r\"D:/Semester_1/Cloud Technologies/Assignment_2/athlete_events.csv\")\n",
    "\n",
    "#Dataset-Varsha\n",
    "athlete_events = pd.read_csv(r\"D:/Semester_1/Cloud Technologies/Assignment_2/athlete_events.csv\")\n",
    "#Dataset-Palbar\n",
    "athlete_info_palbar = pd.read_csv(r\"D:/Semester_1/Cloud Technologies/Assignment_2/athlete_events.csv\")\n",
    "\n",
    "#Dataset-Xhegxing\n",
    "athelet_info_lzx = pd.read_csv(r\"D:/Semester_1/Cloud Technologies/Assignment_2/athlete_events.csv\")\n",
    "noc_regions_lzx = pd.read_csv(r\"D:/Semester_1/Cloud Technologies/Assignment_2/noc_regions.csv\")\n",
    "\n",
    "#Dataset-Shruthi\n",
    "athletes_sn = pd.read_csv(r\"D:/Semester_1/Cloud Technologies/Assignment_2/athlete_events.csv\")\n",
    "noc_regions_sn = pd.read_csv(r\"D:/Semester_1/Cloud Technologies/Assignment_2/noc_regions.csv\")\n",
    "\n",
    "#Dataset-Divya\n",
    "data = pd.read_csv(r\"D:/Semester_1/Cloud Technologies/Assignment_2/athlete_events.csv\")\n",
    "                        \n",
    "#Task - Siddarth\n",
    "#events_df_sid.info()\n",
    "\n",
    "events_sid = events_df_sid.dropna(subset=['Weight'])\n",
    "events_sid = events_sid.dropna(subset=['Height'])\n",
    "\n",
    "events_sid = events_sid.drop(['ID', 'Name', 'Age', 'Team', 'NOC', 'Games', 'Season', 'City', 'Sport', 'Event', 'Medal'], axis = 1)\n",
    "\n",
    "#Separating male and female dataframes\n",
    "height_data_sid = events_sid[[\"Sex\",\"Height\",\"Year\"]]\n",
    "weight_data_sid = events_sid[[\"Sex\",\"Height\",\"Year\"]]\n",
    "\n",
    "#Calculating the mean of height and weight for every year.\n",
    "height_mean_sid = (events_sid.groupby(['Year', 'Sex'], as_index = False)['Height'].mean())\n",
    "weight_mean_sid = (events_sid.groupby(['Year', 'Sex'], as_index = False)['Weight'].mean())\n",
    "\n",
    "includes_sid=['M','F']\n",
    "dfh_selected_sid=height_mean_sid[height_mean_sid['Sex'].isin(includes_sid)]\n",
    "dfw_selected_sid=weight_mean_sid[weight_mean_sid['Sex'].isin(includes_sid)]\n",
    "\n",
    "M_height_sid=height_mean_sid[height_mean_sid['Sex'].isin(['M'])]\n",
    "F_height_sid=height_mean_sid[height_mean_sid['Sex'].isin(['F'])]\n",
    "\n",
    "M_weight_sid=weight_mean_sid[weight_mean_sid['Sex'].isin(['M'])]\n",
    "F_weight_sid=weight_mean_sid[weight_mean_sid['Sex'].isin(['F'])]\n",
    "#Task - Sid - End\n",
    "                     \n",
    "                         \n",
    "#Task- Pallavi\n",
    "\n",
    "finalData = pd.merge(athlete, nocRegions, on='NOC', how='left')\n",
    "cleanedData = finalData.drop_duplicates()\n",
    "df = cleanedData.pivot_table(cleanedData, index=['Year','Sex','ID'], aggfunc=lambda x: len(x.unique())).reset_index()[['Year','Sex','ID',]]\n",
    "df = df.pivot_table(df, index=['Year'], columns='Sex', aggfunc=sum).reset_index()\n",
    "df.columns = ['Year','Female Athletes','Male Athletes']\n",
    "df.fillna(0,inplace=True)\n",
    "df['Gender Ratio'] = df['Female Athletes'] / (df['Female Athletes'] + df['Male Athletes'])\n",
    "df['Total Athletes'] = (df['Female Athletes'] + df['Male Athletes'])\n",
    "\n",
    "                         \n",
    "\n",
    "#Task - Palbar --Start\n",
    "sport_participants_palbar = athlete_info_palbar.groupby(['Season', 'Sport']).agg({'ID':'nunique'}).reset_index()\n",
    "sport_participants_palbar = sport_participants_palbar.rename(columns={'ID': 'Participants'})\n",
    "\n",
    "year_sport_participants_palbar = athlete_info_palbar.groupby(['Year','Season','Sport']).agg({'ID':'nunique'}).reset_index()\n",
    "year_sport_participants_palbar = year_sport_participants_palbar.rename(columns={'ID': 'Participants'})\n",
    "\n",
    "season_option_list_palbar = []\n",
    "season_list_palbar = sport_participants_palbar['Season'].unique()\n",
    "for i in season_list_palbar:\n",
    "    season_option_list_palbar.append({'label':i, 'value':i})\n",
    "\n",
    "season_option_list_palbar = []\n",
    "season_list_palbar = sport_participants_palbar['Season'].unique()\n",
    "for i in season_list_palbar:\n",
    "    season_option_list_palbar.append({'label':i, 'value':i})\n",
    "    \n",
    "year_option_list_palbar = []\n",
    "year_list_palbar = np.sort(athlete_info_palbar[\"Year\"].unique())\n",
    "for i in year_list_palbar:\n",
    "    year_option_list_palbar.append({'label':i, 'value':i})\n",
    "\n",
    "#Task - Palbar --end\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Task - Varsha\n",
    "Viz_1 = athlete_events[['Team' , 'Medal' , 'Year' , 'NOC']]\n",
    "Viz_1 = Viz_1.groupby(['Medal', 'Year' , 'Team'],as_index=False).count()\n",
    "Viz_1 = Viz_1.sort_values(by = 'Year',ascending=True)\n",
    "\n",
    "filterdViz_1 = ['United States', 'Great Britain' , 'France']\n",
    "Viz_1 = Viz_1[Viz_1.Team.isin(filterdViz_1)]\n",
    "Viz_1 = Viz_1.rename(columns={\"NOC\": \"Medal_Count\"})\n",
    "\n",
    "\n",
    "\n",
    "#Task - Xhengxing\n",
    "athelet_info_lzx['NOC']= athelet_info_lzx['NOC'].replace('SGP','SIN')\n",
    "noc_regions_lzx['region']= noc_regions_lzx['region'].replace('Boliva','Bolivia')\n",
    "\n",
    "\n",
    "#Task - Shruthi\n",
    "df_sn = pd.merge(left=athletes_sn,right=noc_regions_sn,how='left',on='NOC')\n",
    "df_sn.drop_duplicates()\n",
    "df_new_sn = df_sn.sort_values(by=['region', 'Year'])\n",
    "df_new_sn = df_new_sn.groupby(['Season','region','Year'])['ID'].count().reset_index(name='count')\n",
    "\n",
    "NOC_values_sn = df_new_sn['region'].unique()\n",
    "year_values_sn = df_new_sn['Year'].unique()\n",
    "\n",
    "\n",
    "medal_list_sn = ['Gold','Silver','Bronze']\n",
    "df_medals_sn = df_sn[df_sn['Medal'].isin(medal_list_sn)]\n",
    "df_medals_sn.head()\n",
    "df_medals_sn['count'] = df_sn.groupby(['region','Season','Medal','Year'])['ID'].transform('count')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dash app running on http://127.0.0.1:8051/\n",
      "Austria 1948\n",
      "Austria 1948\n"
     ]
    }
   ],
   "source": [
    "#Dash Implementation\n",
    "\n",
    "external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']\n",
    "\n",
    "app = JupyterDash(__name__, external_stylesheets=external_stylesheets)\n",
    "server = app.server\n",
    "\n",
    "year_options = []\n",
    "for Year in Viz_1['Year'].unique():\n",
    "    year_options.append({'label':str(Year),'value':Year})\n",
    "colors = {'Silver': '#D3D3D3','Bronze': '#cd7f32','Gold':'#FFD700'}\n",
    "\n",
    "\n",
    "colors2 = {'Female Athletes': '#fc0339','Male Athletes': '#1e026b','Total Athletes':'#6b0207','Gender Ratio':'#15c3d6'}\n",
    "\n",
    "#Divya\n",
    "def highest_participants(data=data):\n",
    "    participants = data.groupby(by=['Year', 'Sport']).size().groupby(level=0).nlargest(5).droplevel(0).to_frame().reset_index()\n",
    "    years2 = ['Year ' + str(yr) for yr in participants['Year'].unique()]\n",
    "\n",
    "    participants = participants.groupby(by='Year')\n",
    "\n",
    "    colors3 = ['#004D40', '#00897B', '#4DB6AC', '#B2DFDB', '#E0F2F1']\n",
    "\n",
    "    fig2 = go.Figure(\n",
    "        [go.Barpolar(r=participants.nth(i)[0], name='', text=participants.nth(i)['Sport'], marker_color=colors3[i],\n",
    "                     theta=years2)\n",
    "         for i in range(4, -1, -1)],\n",
    "        go.Layout(height=1000, title='Top 5 popular sports in Olympic History',\n",
    "                  polar_bgcolor='#212121', paper_bgcolor='#212121',\n",
    "                  font_size=15, font_color='#FFFFFF',\n",
    "                  polar=dict(radialaxis=dict(visible=False)))\n",
    "    )\n",
    "\n",
    "    #plt.plot(fig2, 'div.html')\n",
    "    return (fig2)\n",
    "fig2 = highest_participants() \n",
    "\n",
    "#Siddarth\n",
    "h_trace1_sid = go.Scatter(x=M_height_sid['Year'][:2],\n",
    "                    y=M_height_sid['Height'][:2],\n",
    "                    mode='lines',\n",
    "                    line=dict(width=1.5),\n",
    "                    name=\"Male\")\n",
    "h_trace2_sid = go.Scatter(x=F_height_sid['Year'][:2],\n",
    "                    y=F_height_sid['Height'][:2],\n",
    "                    mode='lines',\n",
    "                    line=dict(width=1.5),\n",
    "                    name=\"Female\")\n",
    "\n",
    "h_frames_sid = [dict(data= [dict(type='scatter',\n",
    "                           x=M_height_sid['Year'][:k+1],\n",
    "                           y=M_height_sid['Height'][:k+1]),\n",
    "                      dict(type='scatter',\n",
    "                           x=F_height_sid['Year'][:k+1],\n",
    "                           y=F_height_sid['Height'][:k+1]),\n",
    "                     ],\n",
    "               traces= [0, 1],  \n",
    "              )for k  in  range(1, len(M_height_sid)-1)]\n",
    "\n",
    "h_layout_sid = go.Layout(\n",
    "    hovermode='x',\n",
    "     updatemenus=[\n",
    "            dict(\n",
    "                type='buttons', showactive=False, xanchor='right', yanchor='top',\n",
    "                 buttons=[\n",
    "                          dict(label='Play', method='animate', \n",
    "                               args=[None, dict(frame=dict(duration=60, redraw=False), transition=dict(duration=100),\n",
    "                                                fromcurrent=True, mode='immediate')]\n",
    "                          )]\n",
    "            ),\n",
    "                          \n",
    "     ]\n",
    ")\n",
    "\n",
    "h_layout_sid.update(xaxis =dict(range=['1896', '2016'], autorange=False), yaxis =dict(range=[160, 185], autorange=False));\n",
    "\n",
    "height_animated_sid = go.Figure(data=[h_trace1_sid, h_trace2_sid], frames=h_frames_sid, layout=h_layout_sid)\n",
    "\n",
    "height_animated_sid.update_layout(\n",
    "    title=\"Heights of Males and Females in cm\",\n",
    "    xaxis_title=\"Years\",\n",
    "    yaxis_title=\"Height (cm)\"\n",
    "    )\n",
    "\n",
    "\n",
    "w_trace1_sid = go.Scatter(x=M_weight_sid['Year'][:2],\n",
    "                    y=M_weight_sid['Weight'][:2],\n",
    "                    mode='lines',\n",
    "                    line=dict(width=1.5),\n",
    "                    name=\"Male\")\n",
    "w_trace2_sid = go.Scatter(x=F_weight_sid['Year'][:2],\n",
    "                    y=F_weight_sid['Weight'][:2],\n",
    "                    mode='lines',\n",
    "                    line=dict(width=1.5),\n",
    "                    name=\"Female\")\n",
    "\n",
    "w_frames_sid = [dict(data= [dict(type='scatter',\n",
    "                           x=M_weight_sid['Year'][:k+1],\n",
    "                           y=M_weight_sid['Weight'][:k+1]),\n",
    "                      dict(type='scatter',\n",
    "                           x=F_weight_sid['Year'][:k+1],\n",
    "                           y=F_weight_sid['Weight'][:k+1]),\n",
    "                     ],\n",
    "               traces= [0, 1],  \n",
    "              )for k  in  range(1, len(M_weight_sid)-1)]\n",
    "\n",
    "\n",
    "w_layout_sid = go.Layout(\n",
    "    hovermode='x',\n",
    "     updatemenus=[\n",
    "            dict(\n",
    "                type='buttons', showactive=False, xanchor='right', yanchor='top',\n",
    "                 buttons=[\n",
    "                          dict(label='Play', method='animate', \n",
    "                               args=[None, dict(frame=dict(duration=60, redraw=False), transition=dict(duration=100),\n",
    "                                                fromcurrent=True, mode='immediate')]\n",
    "                          )]\n",
    "            ),\n",
    "                          \n",
    "     ]\n",
    ")\n",
    "\n",
    "w_layout_sid.update(xaxis =dict(range=['1896', '2016'], autorange=False), yaxis =dict(range=['55', '80'], autorange=False));\n",
    "\n",
    "weight_animated_sid = go.Figure(data=[w_trace1_sid, w_trace2_sid], frames=w_frames_sid, layout=w_layout_sid)\n",
    "\n",
    "weight_animated_sid.update_layout(\n",
    "    title=\"Weights of Males and Females in kg\",\n",
    "    xaxis_title=\"Years\",\n",
    "    yaxis_title=\"Weight (kg)\"\n",
    "    )\n",
    "\n",
    "#Pallavi\n",
    "fig = go.Figure()\n",
    "\n",
    "for col in df.loc[:, df.columns != 'Year']:\n",
    "    fig.add_trace(\n",
    "        go.Bar(\n",
    "            x = df['Year'],\n",
    "            y = df[col],\n",
    "            name= col,\n",
    "            marker=dict(color=colors2[col])\n",
    "        )\n",
    "    )\n",
    "    \n",
    "fig.update_layout(\n",
    "    updatemenus=[go.layout.Updatemenu(\n",
    "        active=0,\n",
    "        buttons=list(\n",
    "            [\n",
    "             dict(label = 'All',\n",
    "                  method = 'update',\n",
    "                  args = [{'visible': [True, True, True, True]},\n",
    "                          {'title': '',\n",
    "                           'showlegend':True}]),\n",
    "             dict(label = 'Female Athletes',\n",
    "                  method = 'update',\n",
    "                  args = [{'visible': [True, False, False, False]},\n",
    "                          {'title': 'Female Athletes from 1896-2016',\n",
    "                           'showlegend':False}]),\n",
    "             dict(label = 'Male Athletes',\n",
    "                  method = 'update',\n",
    "                  args = [{'visible': [False,True, False, False]},\n",
    "                          {'title': 'Male Athletes from 1896-2016',\n",
    "                           'showlegend':False}]),\n",
    "             \n",
    "             dict(label = 'Gender Ratio',\n",
    "                  method = 'update',\n",
    "                  args = [{'visible': [False, False, True, False]},\n",
    "                          {'title': 'Gender Ratio from 1896-2016',\n",
    "                           'showlegend':False}]),\n",
    "             dict(label = 'Total Athletes',\n",
    "                  method = 'update',\n",
    "                  args = [{'visible': [False, False, False, True]},\n",
    "                          {'title': ' Total Athletes from 1896-2016',\n",
    "                           'showlegend':False}]),\n",
    "            ])\n",
    "        )\n",
    "    ]) #end-Pallavi\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.Div(\n",
    "                [\n",
    "                    html.Img(\n",
    "                        src='https://statathlon.com/wp-content/uploads/2018/01/rio-de-janeiro-2016-summer-olympics-e1467812135773.png',\n",
    "                        #src = image_filename,\n",
    "                        className=\"logo\",\n",
    "                        style={'height':'15%',\n",
    "                               'width' : '15%',\n",
    "                              }\n",
    "                    ),\n",
    "                    html.H1(\"Olympics Games - Last 120 years\" , style = { 'text-align': 'center'}),                   \n",
    "                    html.A(\n",
    "                        html.Button(\"Learn More\", id=\"learn-more-button\"),\n",
    "                        href=\"https://www.olympic.org/\",\n",
    "                        style = {\n",
    "                        'float': 'right',\n",
    "                        }\n",
    "                    ),\n",
    "                     html.A(\n",
    "                        html.Img(src = 'http://pngimg.com/uploads/github/github_PNG15.png', id=\"github-icon\",\n",
    "                                style = {\n",
    "                        'float': 'right',\n",
    "                        'height' : '10%',\n",
    "                        'width' : '10%',\n",
    "                        'position' : 'relative'\n",
    "                        }),\n",
    "                        href=\"https://github.com/siddarth-patil/CloudApp\",\n",
    "                       \n",
    "                    ),\n",
    "                    html.A(\n",
    "                        html.Img(src = 'https://upload.wikimedia.org/wikipedia/commons/7/7c/Kaggle_logo.png', id=\"kaggle-icon\",\n",
    "                                style = {\n",
    "                        'float': 'right',\n",
    "                        'height' : '7%',\n",
    "                        'width' : '7%',\n",
    "                        'position' : 'relative'\n",
    "                        }),\n",
    "                        href=\"https://www.kaggle.com/heesoo37/120-years-of-olympic-history-athletes-and-results\",\n",
    "                       \n",
    "                    ),\n",
    "                ],\n",
    "                style = {'display': 'inline-block'},\n",
    "                className=\"row\",\n",
    "            ),\n",
    "    html.Br([]),\n",
    "    dcc.Tabs([\n",
    "    dcc.Tab(label='App Overview', children=[\n",
    "        html.H6('Context', style = {'font-weight': 'bold'}),\n",
    "        html.Div('This app collects the data from here and presents various visualisation based on the data and helps us in understanding the data various aspects of it. Most of the visualisations are interactive which helps you to select various parameters according to your requirement and the app and it will generate a visulisation dynamically based on the selected parameters.'),\n",
    "        html.Br(),\n",
    "        html.H6('Dataset', style = {'font-weight': 'bold'}),\n",
    "    dcc.Markdown('''\n",
    "            This is a historical dataset on the modern Olympic Games, including all the Games from Athens 1896 to Rio 2016. \n",
    "            The data was scraped from this data from www.sports-reference.com in May 2018.            The file athlete_events.csv contains 271116 rows and 15 columns. Each row corresponds to an individual athlete \n",
    "            competing in an individual Olympic event (athlete-events). The columns are:\n",
    "            * ID - Unique number for each athlete\n",
    "            * Name - Athlete's name\n",
    "            * Sex - M or F\n",
    "            * Age - Integer\n",
    "            * Height - In centimeters\n",
    "            * Weight - In kilograms\n",
    "            * Team - Team name\n",
    "            * NOC - National Olympic Committee 3-letter code\n",
    "            * Games - Year and season\n",
    "            * Year - Integer\n",
    "            * Season - Summer or Winter\n",
    "            * City - Host city\n",
    "            * Sport - Sport\n",
    "            * Event - Event\n",
    "            * Medal - Gold, Silver, Bronze, or NA\n",
    "    ''')\n",
    "    ]),\n",
    "        \n",
    "    \n",
    "    dcc.Tab(label='Sid,Pal', children=[\n",
    "           html.Div([\n",
    "                                          html.H1(children='Height Analysis'),\n",
    "                                          dcc.Graph(\n",
    "                                          id='height-graph',\n",
    "                                          figure=height_animated_sid\n",
    "                                )\n",
    "                                ]),\n",
    "\n",
    "                                html.Div([\n",
    "                                          html.H1(children='Weight Analysis'),\n",
    "                                          dcc.Graph(\n",
    "                                          id='weight-graph',\n",
    "                                          figure=weight_animated_sid\n",
    "                                )\n",
    "                                ]),\n",
    "                            html.H1(children='Athletes Count in Olympics from 1896-2020'),\n",
    "    dcc.Graph(\n",
    "        id='example-graph',\n",
    "        figure=fig\n",
    "    )\n",
    "        ]),\n",
    "    dcc.Tab(label='Palbar, Varsha', children=[\n",
    "    \n",
    "        \n",
    "    html.Div('Olympic Season Top Ten Sports with the Highest Numbers of Participants'),\n",
    "    html.Br(),\n",
    "    html.Label('Note: Winter and Summer Olympic were held in the same year up until 1992. After 1992, Olympic Games occured on a four year cycle starting with Winter in 1994, then Summer in 1996, then Winter in 1998, and so on.'),\n",
    "    html.Br(),\n",
    "    html.Br(),\n",
    "    html.Label('Select the Olympic season to see the top ten sports with the highest numbers of athletes participantion'),\n",
    "    html.Br(),\n",
    "    html.Br(),\n",
    "    html.Label('Select Season:', style = {'width':'50%', 'display':'inline-block'}),\n",
    "    \n",
    "    html.Label('Select Year of the Season:', style = {'text-align':'left', 'width':'50%', 'display':'inline-block'}),\n",
    "    \n",
    "    html.Div(dcc.Dropdown(id = 'dropdown_season_palbar', options = season_option_list_palbar, value = 'Summer'),\n",
    "             style = {'text-align':'center', 'width':'30%', 'display':'inline-block'}\n",
    "            ),\n",
    "    \n",
    "    html.Div(dcc.Dropdown(id = 'dropdown_year_palbar', options = year_option_list_palbar, value = 1992),\n",
    "             style = {'text-align':'center', 'width':'30%', 'display':'inline-block', 'margin-left':'300px'}\n",
    "            ),\n",
    "    html.Br(),\n",
    "    \n",
    "    html.Div([dcc.Graph(id = 'plot_sport_graph_palbar', figure = {})], style = {'display':'inline-block', 'width':'50%'}),\n",
    "    html.Div([dcc.Graph(id = 'plot_year_graph_palbar', figure = {})], style = {'display':'inline-block', 'width':'50%'}),\n",
    "    html.Br(),\n",
    "    html.Br(),    \n",
    "            \n",
    "     html.Div([\n",
    "        dcc.Dropdown(id='year-picker',options=year_options,value=Viz_1['Year'].max())\n",
    "    ],\n",
    "    style={'textAlign': 'center','width': '20%', 'display': 'inline-block'}), \n",
    "       dcc.Graph(id='graph-with-slider'),\n",
    "        ]),\n",
    "        \n",
    "    dcc.Tab(label='Xhengxing', children=[\n",
    "        html.H1(children = 'Medals'),\n",
    "\n",
    "    html.H2(children = 'Select a Medal type:'),\n",
    "    dcc.Dropdown(\n",
    "                id='medals',\n",
    "                options=[{'label': i, 'value': i} for i in ['All','Gold','Silver','Bronze']],\n",
    "                value='All',\n",
    "                clearable = False,\n",
    "                searchable = False,\n",
    "                style = {'width':'50%'}\n",
    "            ),\n",
    "    dcc.Graph(\n",
    "        id='choropleth',\n",
    "        style = {'width':'50%'}\n",
    "    )\n",
    "        \n",
    "    ]),\n",
    "    dcc.Tab(label='Shruthi', children=[\n",
    "        html.H1(\"Region-Wise Participation in the Olympic Games\", style={'text-align': 'center'}),\n",
    "    html.Br(),\n",
    "    html.H2(\"Summary of the dashboard:\"),\n",
    "    html.P(\"The Doughnut chart represents the participation of various regions in the Summer and Winter Olympics.\"),\n",
    "    html.P(\"The barcharts display the number of medals won by each region for each year\"),\n",
    "    html.Br(),\n",
    "    html.Div([\n",
    "    html.Div([\n",
    "    html.P(\"Choose a country: \"),\n",
    "    dcc.Dropdown(\n",
    "                id='country_dropdown',\n",
    "                options=[{'label': i, 'value': i} for i in NOC_values_sn],\n",
    "                multi=False,\n",
    "                value='Austria',\n",
    "                style={'width': \"50%\"}\n",
    "                )\n",
    "    ],\n",
    "    style={'width': '50%', 'display': 'inline-block'}),\n",
    "    \n",
    "   \n",
    "    html.Div([\n",
    "    html.P(\"Select a Year: \"),\n",
    "    dcc.Dropdown(\n",
    "                id='year-dropdown',\n",
    "                options = sorted([{'label': j, 'value': j} for j in year_values_sn], key = lambda w: w['label']),\n",
    "                multi=False,\n",
    "                value='1948',\n",
    "                style={'width': \"50%\"}\n",
    "                )\n",
    "    ], style={'width': '49%', 'float': 'right', 'display': 'inline-block'})\n",
    "    \n",
    "    ], style={\n",
    "        'borderBottom': 'thin lightgrey solid',\n",
    "        'backgroundColor': 'rgb(250, 250, 250)',\n",
    "        'padding': '10px 5px'\n",
    "    }),\n",
    "    \n",
    "      html.Br(),\n",
    "\n",
    "    \n",
    "    html.Div(children=[\n",
    "        dcc.Graph(id='first-chart',figure={},style={'text-align': 'center','display': 'inline-block', 'width' : '50%'}),\n",
    "        dcc.Graph(id='second-chart',figure={},style={'text-align': 'center','display': 'inline-block', 'width' : '50%'})   \n",
    "    ]),\n",
    "       html.Br(), \n",
    "        dcc.Graph(figure = fig2)\n",
    "    ])\n",
    "        \n",
    "    ])\n",
    "])\n",
    "\n",
    "@app.callback([dash.dependencies.Output('plot_sport_graph_palbar', 'figure'),\n",
    "               dash.dependencies.Output('plot_year_graph_palbar', 'figure')],\n",
    "              [dash.dependencies.Input('dropdown_season_palbar', 'value'),\n",
    "               dash.dependencies.Input('dropdown_year_palbar', 'value')]\n",
    "             )\n",
    "\n",
    "def update_graph(dropdown_season_palbar,dropdown_year_palbar):\n",
    "    season_sport_participants_palbar = sport_participants_palbar.copy()\n",
    "    season_sport_participants_palbar = season_sport_participants_palbar[season_sport_participants_palbar['Season'] == dropdown_season_palbar]\n",
    "    \n",
    "    sorted_sport_participants_palbar = season_sport_participants_palbar.sort_values('Participants',ascending = False)\n",
    "    top_ten_participants_palbar = sorted_sport_participants_palbar[:10]\n",
    "    sport_fig_palbar = px.bar(top_ten_participants_palbar.sort_values('Participants',ascending=True), x='Participants', y='Sport',\n",
    "                       color_discrete_sequence =['lightblue']*len(top_ten_participants_palbar))\n",
    "    \n",
    "    year_sport_palbar = year_sport_participants_palbar.copy()\n",
    "    year_sport_palbar = year_sport_palbar[year_sport_palbar['Season'] == dropdown_season_palbar]\n",
    "    \n",
    "    year_participants_palbar = year_sport_palbar[year_sport_palbar['Year'] == dropdown_year_palbar]\n",
    "    sorted_year_palbar = year_participants_palbar.sort_values('Participants',ascending = False)\n",
    "    top_ten_year_palbar = sorted_year_palbar[:10]\n",
    "    year_fig_palbar = px.bar(top_ten_year_palbar.sort_values('Participants',ascending=True), x='Participants', y='Sport',\n",
    "                       color_discrete_sequence =['lightblue']*len(top_ten_participants_palbar))\n",
    "    \n",
    "    sport_fig_palbar.update_layout(\n",
    "        width = 650,\n",
    "        height = 500,\n",
    "        title = '<b>Top Ten Sports In Olympic {} Season</b>'.format(dropdown_season_palbar),\n",
    "        xaxis_tickangle = -45,\n",
    "        paper_bgcolor='rgba(0,0,0,0)',\n",
    "        plot_bgcolor='rgba(0,0,0,0)',\n",
    "        xaxis = dict(\n",
    "            title = '<b>Total Number of Participants</b>',\n",
    "            title_font = {'size': 14},\n",
    "            tickmode = 'linear',\n",
    "            tick0 = 0,\n",
    "            dtick = 2000,\n",
    "            range = [0, 23000],\n",
    "            gridwidth = 1,\n",
    "            gridcolor = 'lightblue',\n",
    "        ),\n",
    "        yaxis = dict(\n",
    "            title = '<b>Sport</b>',\n",
    "            title_font = {'size': 14}\n",
    "        )\n",
    "    ),\n",
    "    \n",
    "    year_fig_palbar.update_layout(\n",
    "        width = 650,\n",
    "        height = 500,\n",
    "        title = '<b>Top Ten Sports In Olympic {} Season Year {}</b>'.format(dropdown_season_palbar,dropdown_year_palbar),\n",
    "        xaxis_tickangle = -45,\n",
    "        paper_bgcolor='rgba(0,0,0,0)',\n",
    "        plot_bgcolor='rgba(0,0,0,0)',\n",
    "        xaxis = dict(\n",
    "            title = '<b>Total Number of Participants</b>',\n",
    "            title_font = {'size': 14},\n",
    "            tickmode = 'linear',\n",
    "            tick0 = 0,\n",
    "            dtick = 200,\n",
    "            range = [0, 2300],\n",
    "            gridwidth = 1,\n",
    "            gridcolor = 'lightblue'\n",
    "        ),\n",
    "        yaxis = dict(\n",
    "            title = '<b>Sport</b>',\n",
    "            title_font = {'size': 14}\n",
    "        )\n",
    "    )    \n",
    "    return sport_fig_palbar,year_fig_palbar\n",
    "\n",
    "@app.callback(Output('graph-with-slider', 'figure'),\n",
    "              [Input('year-picker', 'value')])\n",
    "def update_figure(selected_year):\n",
    "    filtered_df = Viz_1[Viz_1['Year'] == selected_year]\n",
    "    traces = []\n",
    "    for medal_type in filtered_df['Medal'].unique():\n",
    "        df_by_medal = filtered_df[filtered_df['Medal'] == medal_type]\n",
    "        traces.append(go.Bar(\n",
    "            x=df_by_medal['Team'],\n",
    "            y=df_by_medal['Medal_Count'],\n",
    "            name = medal_type,\n",
    "            marker =dict(color=colors[medal_type])\n",
    "        ))\n",
    "        \n",
    "    return {\n",
    "        'data': traces,\n",
    "        'layout': go.Layout(\n",
    "            title = 'Top 3 Countries: Medal Wise Count for a particular year',\n",
    "            #barmode = 'stack',\n",
    "            xaxis={\n",
    "                'title': 'Country',\n",
    "                'showgrid' :False,\n",
    "            },\n",
    "            yaxis={\n",
    "                'title': 'Medal Wise Count',\n",
    "                 'showgrid' :False,\n",
    "            },\n",
    "            hovermode='closest'\n",
    "        )\n",
    "    }\n",
    "\n",
    "#Shruthi\n",
    "@app.callback(\n",
    "    [Output(component_id='first-chart', component_property='figure'),\n",
    "     Output(component_id='second-chart', component_property='figure')],\n",
    "    [Input(component_id='country_dropdown', component_property='value'),\n",
    "     Input(component_id='year-dropdown', component_property='value')]\n",
    "    )\n",
    "def update_graph(reg_chosen_sn,year_selected_sn):\n",
    "    print(reg_chosen_sn,year_selected_sn)\n",
    "    \n",
    "    dff1_sn = df_new_sn.copy()\n",
    "    filter1_sn = dff1_sn['region'].isin([reg_chosen_sn])\n",
    "    filter2_sn = dff1_sn['Year'].isin([year_selected_sn])\n",
    "    dff1_sn = dff1_sn[filter1_sn & filter2_sn]\n",
    "\n",
    "       \n",
    "    fig1_sn = px.pie(dff1_sn, values='count', names='Season', \n",
    "       title='Seasonal distribution for the chosen country', \n",
    "       #opacity=0.7,\n",
    "       labels={'Season':'Season','count':'Participants'},\n",
    "       color='Season',\n",
    "       color_discrete_map={\"Summer\": \"orangered\" ,\"Winter\":\"blue\"},               \n",
    "       hole=0.3)\n",
    "    \n",
    "    fig1_sn.update_traces(textposition='inside', textinfo='percent+label')\n",
    "   \n",
    "    fig1_sn.update_layout(title_font_size=17,title_x=0.5,uniformtext_minsize=8)\n",
    "    \n",
    "    \n",
    "    dff2_sn = df_medals_sn.copy()\n",
    "    filter3_sn = dff2_sn['region'].isin([reg_chosen_sn])\n",
    "    filter4_sn = dff2_sn['Year'].isin([year_selected_sn])\n",
    "    dff2_sn = dff2_sn[filter3_sn & filter4_sn]\n",
    "\n",
    "    fig2_sn = px.bar(dff2_sn,\n",
    "        x='Season',y='count',\n",
    "        orientation='v',\n",
    "        title='No of medals won in Summer and Winter',\n",
    "        hover_name='Season',labels={'Season': 'Season', 'count': 'Medals Won'},\n",
    "        facet_col = 'Medal',\n",
    "        color='Season',\n",
    "        color_discrete_map={\"Summer\": \"orangered\" ,\"Winter\":\"blue\"})\n",
    "    \n",
    "    \n",
    "    fig2_sn.update_layout(title_font_size=17,title_x=0.5,uniformtext_minsize=8)\n",
    "    fig2_sn.update_yaxes(showticklabels=False, visible=True)\n",
    "    \n",
    "   \n",
    "    \n",
    "    return fig1_sn,fig2_sn\n",
    "\n",
    "#Xhengxing\n",
    "def update_dataframe(medal_type):\n",
    "    if(medal_type == 'All'):\n",
    "        NOC_group = pd.DataFrame(athelet_info_lzx.groupby(['NOC'])['Medal'].count())\n",
    "        return pd.merge(NOC_group,noc_regions_lzx,how='inner',on=[NOC_group.index, noc_regions_lzx.NOC])\n",
    "    else:\n",
    "        temp = pd.DataFrame(athelet_info_lzx[athelet_info_lzx.Medal == medal_type][['NOC','Medal']].groupby(['NOC']).count()).reset_index()\n",
    "        result = pd.merge(noc_regions_lzx,temp, how='left', on='NOC')\n",
    "        result.Medal = result.Medal.fillna(0)\n",
    "        return result\n",
    "\n",
    "@app.callback(\n",
    "    dash.dependencies.Output('choropleth','figure'),\n",
    "    dash.dependencies.Input('medals','value'))\n",
    "def update_graph(medal_type):\n",
    "    \n",
    "    data = update_dataframe(medal_type)    \n",
    "    color = ''\n",
    "    tick_step = 0\n",
    "    reverse = True\n",
    "    \n",
    "    if (medal_type == 'All'):\n",
    "        color = 'Purples'\n",
    "        tick_step = 500\n",
    "\n",
    "    elif (medal_type == 'Gold'):\n",
    "        color = 'solar'\n",
    "        tick_step = 200\n",
    "        reverse = False\n",
    "\n",
    "    elif (medal_type == 'Silver'):\n",
    "        color = 'Greys'\n",
    "        tick_step = 200\n",
    "\n",
    "    elif (medal_type == 'Bronze'):\n",
    "        color = 'OrRd'\n",
    "        tick_step = 200\n",
    "\n",
    "    return go.Figure(data=go.Choropleth(\n",
    "    locations = data.region,\n",
    "    z = data['Medal'],\n",
    "    text = data.NOC,\n",
    "    colorscale = color,\n",
    "    autocolorscale=False,\n",
    "    reversescale=reverse,\n",
    "    marker_line_color='darkgray',\n",
    "    colorbar_title = 'The Number of Medals',\n",
    "    locationmode = 'country names',\n",
    "    \n",
    "    )).update_traces(\n",
    "    colorbar = dict(\n",
    "        ticks = 'outside',\n",
    "        tickmode = 'linear',\n",
    "        tick0 = 0,\n",
    "        dtick = tick_step\n",
    "    ),\n",
    "        \n",
    "    ).update_layout(\n",
    "    title_text='The Number of '+ medal_type + ' Medals Won By Each Country in Olympic Games From 1896 - 2016',\n",
    "    height = 540,\n",
    "    width = 960,\n",
    "    geo=dict(\n",
    "        showframe=False,\n",
    "        showcoastlines=False,\n",
    "        projection_type='equirectangular',\n",
    "    ),\n",
    "    annotations = [dict(\n",
    "        x=0.5,\n",
    "        y=-0.1,\n",
    "        xref='paper',\n",
    "        yref='paper',\n",
    "        text='Data Source: <a href=\"https://www.kaggle.com/heesoo37/120-years-of-olympic-history-athletes-and-results\">\\\n",
    "            Kaggle</a>',\n",
    "        showarrow = False\n",
    "    )])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "app.run_server(debug=True, port=8051)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
