
from pandas_datareader import data as web 
from datetime import datetime as dt
from dash.dependencies import Input, Output
import plotly.graph_objects as go


nocRegions = pd.read_csv('/content/noc_regions.csv')
athlete = pd.read_csv('/content/athlete_events.csv')
finalData = pd.merge(athlete, nocRegions, on='NOC', how='left')
cleanedData = finalData.drop_duplicates()
df = cleanedData.pivot_table(cleanedData, index=['Year','Sex','ID'], aggfunc=lambda x: len(x.unique())).reset_index()[['Year','Sex','ID',]]
df = df.pivot_table(df, index=['Year'], columns='Sex', aggfunc=sum).reset_index()
df.columns = ['Year','Female Athletes','Male Athletes']
df.fillna(0,inplace=True)
df['Gender Ratio'] = df['Female Athletes'] / (df['Female Athletes'] + df['Male Athletes'])
df['Total Athletes'] = (df['Female Athletes'] + df['Male Athletes'])
df
external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = JupyterDash(__name__, external_stylesheets=external_stylesheets)
colors = {'Female Athletes': '#fc0339','Male Athletes': '#1e026b','Total Athletes':'#6b0207','Gender Ratio':'#15c3d6'}
# Create server variable with Flask server object for use with gunicorn
server = app.server
fig = go.Figure()

for col in df.loc[:, df.columns != 'Year']:
    fig.add_trace(
        go.Bar(
            x = df['Year'],
            y = df[col],
            name= col,
            marker=dict(color=colors[col])
        )
    )
    
fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list(
            [
             dict(label = 'All',
                  method = 'update',
                  args = [{'visible': [True, True, True, True]},
                          {'title': '',
                           'showlegend':True}]),
             dict(label = 'Female Athletes',
                  method = 'update',
                  args = [{'visible': [True, False, False, False]},
                          {'title': 'Female Athletes from 1896-2016',
                           'showlegend':False}]),
             dict(label = 'Male Athletes',
                  method = 'update',
                  args = [{'visible': [False,True, False, False]},
                          {'title': 'Male Athletes from 1896-2016',
                           'showlegend':False}]),
             
             dict(label = 'Gender Ratio',
                  method = 'update',
                  args = [{'visible': [False, False, True, False]},
                          {'title': 'Gender Ratio from 1896-2016',
                           'showlegend':False}]),
             dict(label = 'Total Athletes',
                  method = 'update',
                  args = [{'visible': [False, False, False, True]},
                          {'title': ' Total Athletes from 1896-2016',
                           'showlegend':False}]),
            ])
        )
    ])

#fig.show()
app.layout = html.Div(children=[
    html.H1(children='Athletes Count in Olympics from 1896-2020'),
    dcc.Graph(
        id='example-graph',
        figure=fig
    )
])


app.run_server()

























//////////////////////////////////////////////////////////////////////////////////////////////////////////////
from pandas_datareader import data as web 
from datetime import datetime as dt
from dash.dependencies import Input, Output
import plotly.graph_objects as go


nocRegions = pd.read_csv('/content/noc_regions.csv')
athlete = pd.read_csv('/content/athlete_events.csv')
finalData = pd.merge(athlete, nocRegions, on='NOC', how='left')
cleanedData = finalData.drop_duplicates()
df = cleanedData.pivot_table(cleanedData, index=['Year','Sex','ID'], aggfunc=lambda x: len(x.unique())).reset_index()[['Year','Sex','ID',]]
df = df.pivot_table(df, index=['Year'], columns='Sex', aggfunc=sum).reset_index()
df.columns = ['Year','Female Athletes','Male Athletes']
df.fillna(0,inplace=True)
df['Gender Ratio'] = df['Female Athletes'] / (df['Female Athletes'] + df['Male Athletes'])
df['Total Athletes'] = (df['Female Athletes'] + df['Male Athletes'])
df
external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = JupyterDash(__name__, external_stylesheets=external_stylesheets)
colors = {'Female Athletes': '#fc0339','Male Athletes': '#1e026b','Total Athletes':'#24f22f','Gender Ratio':'#15c3d6'}
# Create server variable with Flask server object for use with gunicorn
server = app.server
fig = go.Figure()

for col in df.loc[:, df.columns != 'Year']:
    fig.add_trace(
        go.Bar(
            x = df['Year'],
            y = df[col],
            name= col,
            marker=dict(color=colors[col])
        )
    )
    
fig.update_layout(
    updatemenus=[go.layout.Updatemenu(
        active=0,
        buttons=list(
            [
             dict(label = 'All',
                  method = 'update',
                  args = [{'visible': [True, True, False, True]},
                          {'title': '',
                           'showlegend':True}]),
             dict(label = 'Female Athletes',
                  method = 'update',
                  args = [{'visible': [True, False, False, False]},
                          {'title': 'Female Athletes from 1896-2016',
                           'showlegend':True}]),
             dict(label = 'Male Athletes',
                  method = 'update',
                  args = [{'visible': [False,True, False, False]},
                          {'title': 'Male Athletes from 1896-2016',
                           'showlegend':True}]),
             
             dict(label = 'Gender Ratio',
                  method = 'update',
                  args = [{'visible': [False, False, True, False]},
                          {'title': 'Gender Ratio from 1896-2016',
                           'showlegend':True}]),
             dict(label = 'Total Athletes',
                  method = 'update',
                  args = [{'visible': [False, False, False, True]},
                          {'title': ' Total Athletes from 1896-2016',
                           'showlegend':True}]),
            ])
        )
    ])

#fig.show()
app.layout = html.Div(children=[
    html.H1(children='Athletes Count in Olympics from 1896-2016'),
    dcc.Graph(
        id='example-graph',
        figure=fig
    )
])


app.run_server()



reference: https://www.kaggle.com/jrmistry/plotly-how-to-change-plot-data-using-dropdowns/comments#939005